spring.application.name=demoOAuth

# APPLICATION CONFIGURATION
server.port=9876

# DATABASE CONFIGURATION
# Format: jdbc:postgresql://host:port/database_name

spring.datasource.url=jdbc:postgresql://localhost:5432/oauth_db

spring.datasource.username=postgres

spring.datasource.password=radha2786

# JDBC driver class for PostgreSQL
# Spring Boot can auto-detect this, but it's good to be explicit
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/HIBERNATE CONFIGURATION
# Hibernate DDL mode - how to handle database schema
# update: Update existing schema, create tables if they don't exist
# create: Drop and recreate schema on each startup (useful for development)
# create-drop: Create schema on startup, drop on shutdown
# validate: Validate existing schema matches entities
# none: Do nothing
spring.jpa.hibernate.ddl-auto=update

# Database dialect - tells Hibernate how to generate SQL for PostgreSQL
# This ensures optimal SQL generation for PostgreSQL-specific features
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Show SQL queries in console - useful for debugging
# Set to false in production for performance and security
spring.jpa.show-sql=true

# Format SQL queries for better readability in logs
# Only useful when show-sql is true
spring.jpa.properties.hibernate.format_sql=true

# =============================================================================
# KEYCLOAK OAUTH2 CLIENT CONFIGURATION

keycloak.auth-server-url=http://localhost:8080/
keycloak.realm=oauth2-demos
keycloak.resource=oauth2-authorization-code-flow
keycloak.credentials.secret=MY1qpuipr5SCSTL6Ywb6rw7uYixWwOIc
keycloak.public-client=false
keycloak.ssl-required=external
keycloak.bearer-only=true
keycloak.use-resource-role-mappings=true

# OAuth2 Client Registration ID: oauth2-authorization-code-flow
# This is a unique identifier for this OAuth2 client configuration

# Client ID - must match the client ID configured in Keycloak
# This identifies your application to Keycloak
spring.security.oauth2.client.registration.oauth2-authorization-code-flow.client-id=oauth2-authorization-code-flow

# Client Secret - must match the client secret configured in Keycloak
# This is like a password for your application
# IMPORTANT: In production, use environment variables or encrypted properties
spring.security.oauth2.client.registration.oauth2-authorization-code-flow.client-secret=MY1qpuipr5SCSTL6Ywb6rw7uYixWwOIc

# OAuth2 Scopes - what permissions your application requests from Keycloak
# openid: Required for OpenID Connect (provides user identity)
# profile: Access to user profile information (name, username, etc.)
# roles: Access to user roles
# email: Access to user email address
# spring.security.oauth2.client.registration.oauth2-authorization-code-flow.scope= openid,profile,roles,email

# OAuth2 Grant Type - the OAuth2 flow to use
# authorization_code: Most secure flow for web applications
# The user is redirected to Keycloak, logs in, and is redirected back with an authorization code
# spring.security.oauth2.client.registration.oauth2-authorization-code-flow.authorization-grant-type= authorization_code

# Redirect URI - where Keycloak should redirect after successful authentication
# This must be registered in Keycloak's client configuration
# Format: http://your-app-host:port/login/oauth2/code/registration-id
# spring.security.oauth2.client.registration.oauth2-authorization-code-flow.redirect-uri=http://localhost:9876/login/oauth2/code/oauth2-authorization-code-flow

# Keycloak Provider Configuration
# Issuer URI - the base URL of your Keycloak realm
# Keycloak uses this to provide OAuth2/OIDC endpoints (authorization, token, userinfo, etc.)
# Format: http://keycloak-host:port/realms/realm-name
# spring.security.oauth2.client.provider.oauth2-authorization-code-flow.issuer-uri=http://localhost:8080/realms/oauth2-demos

# =============================================================================
# JWT RESOURCE SERVER CONFIGURATION
# =============================================================================

# JWT Issuer URI for Resource Server
# This is used to validate JWT tokens sent to our API endpoints
# Must match the Keycloak realm issuer URI
# The resource server will use this to get Keycloak's public keys for token validation
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/oauth2-demos

# =============================================================================
# SESSION MANAGEMENT CONFIGURATION
# =============================================================================

# Session timeout - how long a user session remains active without activity
# 30m = 30 minutes
# You can use: s (seconds), m (minutes), h (hours), d (days)
# server.servlet.session.timeout=30m

# Session store type - where to store session data
# jdbc: Store sessions in database (survives application restarts)
# redis: Store sessions in Redis (for distributed applications)
# none: Store sessions in memory (default, but lost on restart)
# spring.session.store-type=jdbc

# =============================================================================
# KEYCLOAK ADMIN API CONFIGURATION
# =============================================================================
# Admin configuration for backend-to-Keycloak communication
keycloak.admin.server-url=http://localhost:8080
keycloak.admin.realm=master
keycloak.admin.client-id=admin-cli
keycloak.admin.client-secret=
keycloak.admin.username=admin
keycloak.admin.password=admin
keycloak.admin.grant-type=password

# =============================================================================
# KEYCLOAK TOKEN SERVICE CONFIGURATION
# =============================================================================
# Configuration for user authentication (separate from admin operations)
keycloak.token.server-url=http://localhost:8080
keycloak.token.realm=oauth2-demos
keycloak.token.client-id=oauth2-authorization-code-flow
keycloak.token.client-secret=MY1qpuipr5SCSTL6Ywb6rw7uYixWwOIc

# =============================================================================
# LOGGING CONFIGURATION FOR DEBUGGING
# =============================================================================
# Enable debug logging for OAuth2 and JWT
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.security.web=DEBUG
logging.level.com.example.demoOAuth=DEBUG


# file configurations
spring.servlet.multipart.max-file-size=3MB
spring.servlet.multipart.max-request-size=3MB